import Foundation

/*
 * EJERCICIO:
 * ¬°Disney ha presentado un mont√≥n de novedades en su D23!
 * Pero... ¬øD√≥nde est√° Mickey?
 * Mickey Mouse ha quedado atrapado en un laberinto m√°gico
 * creado por Mal√©fica.
 * Desarrolla un programa para ayudarlo a escapar.
 * Requisitos:
 * 1. El laberinto est√° formado por un cuadrado de 6x6 celdas.
 * 2. Los valores de las celdas ser√°n:
 *    - ‚¨úÔ∏è Vac√≠o
 *    - ‚¨õÔ∏è Obst√°culo
 *    - üê≠ Mickey
 *    - üö™ Salida
 * Acciones:
 * 1. Crea una matriz que represente el laberinto (no hace falta
 * que se genere de manera autom√°tica).
 * 2. Interact√∫a con el usuario por consola para preguntarle hacia
 * donde se tiene que desplazar (arriba, abajo, izquierda o derecha).
 * 3. Muestra la actualizaci√≥n del laberinto tras cada desplazamiento.
 * 4. Valida todos los movimientos, teniendo en cuenta los l√≠mites
 * del laberinto y los obt√°culos. Notifica al usuario.
 * 5. Finaliza el programa cuando Mickey llegue a la salida.
 */


// Definimos el tama√±o del laberinto
let TAMANO_LABERINTO = 6

// Definimos los diferentes s√≠mbolos para representar el laberinto
let VACIO = "‚¨úÔ∏è"
let OBSTACULO = "‚¨õÔ∏è"
let MICKEY = "üê≠"
let SALIDA = "üö™"

// Creamos la matriz del laberinto
var laberinto = [
    [VACIO, VACIO, OBSTACULO, VACIO, VACIO, VACIO],
    [VACIO, OBSTACULO, VACIO, OBSTACULO, VACIO, VACIO],
    [VACIO, VACIO, VACIO, VACIO, OBSTACULO, VACIO],
    [OBSTACULO, VACIO, OBSTACULO, VACIO, VACIO, VACIO],
    [VACIO, VACIO, VACIO, OBSTACULO, VACIO, OBSTACULO],
    [MICKEY, VACIO, VACIO, VACIO, VACIO, SALIDA]
]

// Posici√≥n inicial de Mickey
var posicionMickey = (fila: 5, columna: 0)

// Funci√≥n para imprimir el laberinto
func imprimirLaberinto() {
    for fila in laberinto {
        print(fila.joined(separator: " "))
    }
    print("\n")
}

// Funci√≥n para mover a Mickey
func moverMickey(direccion: String) -> Bool {
    let (filaActual, columnaActual) = posicionMickey
    var nuevaFila = filaActual
    var nuevaColumna = columnaActual
    
    // Determinamos la nueva posici√≥n seg√∫n la direcci√≥n ingresada
    switch direccion.lowercased() {
    case "arriba":
        nuevaFila -= 1
    case "abajo":
        nuevaFila += 1
    case "izquierda":
        nuevaColumna -= 1
    case "derecha":
        nuevaColumna += 1
    default:
        print("Direcci√≥n no v√°lida. Usa 'arriba', 'abajo', 'izquierda' o 'derecha'.")
        return false
    }
    
    // Validamos que la nueva posici√≥n est√© dentro de los l√≠mites del laberinto
    if nuevaFila < 0 || nuevaFila >= TAMANO_LABERINTO || nuevaColumna < 0 || nuevaColumna >= TAMANO_LABERINTO {
        print("¬°Movimiento no permitido! Has intentado salirte del laberinto.")
        return false
    }
    
    // Validamos que no haya un obst√°culo en la nueva posici√≥n
    if laberinto[nuevaFila][nuevaColumna] == OBSTACULO {
        print("¬°Movimiento bloqueado! Hay un obst√°culo en esa direcci√≥n.")
        return false
    }
    
    // Actualizamos la posici√≥n de Mickey
    laberinto[filaActual][columnaActual] = VACIO
    laberinto[nuevaFila][nuevaColumna] = MICKEY
    posicionMickey = (nuevaFila, nuevaColumna)
    
    // Comprobar si Mickey ha llegado a la salida
    if laberinto[nuevaFila][nuevaColumna] == SALIDA {
        return true
    }
    
    return false
}

// Funci√≥n principal para ejecutar el juego
func jugar() {
    print("¬°Bienvenido al laberinto m√°gico! Ayuda a Mickey a escapar.")
    imprimirLaberinto()
    
    while true {
        print("¬øHacia d√≥nde quieres mover a Mickey? (arriba, abajo, izquierda, derecha):")
        if let direccion = readLine() {
            let exito = moverMickey(direccion: direccion)
            imprimirLaberinto()
            
            // Si Mickey llega a la salida, termina el juego
            if exito {
                print("¬°Felicidades! Mickey ha encontrado la salida. ¬°Has ganado!")
                break
            }
        }
    }
}

// Inicia el juego
jugar()

